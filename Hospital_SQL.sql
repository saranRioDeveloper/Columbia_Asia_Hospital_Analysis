-- 15. Identify the top 5 doctors who generated the most revenue but had the fewest patients. (SQL) 

SELECT
    `Doctor Name` AS Doctor,
    SUM(`Total Bill`) AS Revenue,
    COUNT(DISTINCT patient_id) AS no_of_patients
FROM doctor_patients_data
GROUP BY `Doctor Name`
ORDER BY  2 desc
limit 5;


-- 16.	Find the department where the average waiting time has decreased over three consecutive months. (SQL) 

WITH Monthly_Avg_WaitingTime AS (
    SELECT 
        department_referral,
        YEAR(STR_TO_DATE(date, '%Y-%m-%d')) AS year,
        MONTH(STR_TO_DATE(date, '%Y-%m-%d')) AS month,
        AVG(patient_waittime) AS avg_waittime
    FROM `hospital er (1)`
    GROUP BY 1,2,3
),
Comparison AS (
    SELECT 
        curr.department_referral,
        curr.year AS current_year,
        curr.month AS current_month,
        curr.avg_waittime AS current_avg,
        prev1.avg_waittime AS last_month_avg,
        prev2.avg_waittime AS last_before_month_avg
    FROM Monthly_Avg_WaitingTime as curr
    LEFT JOIN Monthly_Avg_WaitingTime as prev1
        ON curr.department_referral = prev1.department_referral
        AND (curr.year = prev1.year AND curr.month = prev1.month + 1 OR curr.year = prev1.year + 1 AND curr.month = 1 AND prev1.month = 12)
    LEFT JOIN Monthly_Avg_WaitingTime prev2
        ON curr.department_referral = prev2.department_referral
        AND (prev1.year = prev2.year AND prev1.month = prev2.month + 1 OR prev1.year = prev2.year + 1 AND prev2.month = 12)
)
SELECT 
    department_referral
FROM Comparison
WHERE 
    current_avg < last_month_avg  
    AND last_month_avg < last_before_month_avg
Group by 1; 

-- 17.	Determine the ratio of male to female patients for each doctor and rank the doctors based on this ratio. (SQL) 

with patientCount as (
	select
		d.`Doctor Name` as Doctor_Name,
        sum(case when h.patient_gender = "M" then 1 else 0 end) male_count,
        sum(case when h.patient_gender = "F" then 1 else 0 end) female_count
	from `hospital er (1)` h 
    join doctor_patients_data d on h.patient_id = d.patient_id
    group by 1
),
DoctorRatios as (
	select
		Doctor_Name,
        male_count,
        female_count,
        round(male_count/female_count,2) as MaleToFemale_ratio
	from patientCount
)
select 
	Doctor_Name,
    male_count,
    female_count,
    MaleToFemale_ratio,
    Dense_rank() over( order by MaleToFemale_ratio desc) as Ranking 
from DoctorRatios;

-- 18.	Calculate the average satisfaction score of patients for each doctor based on their visits. (SQL)

select 
	d.`Doctor Name` as Doctor_Name,
    round(avg(case when h.patient_sat_score = "" then 5 else h.patient_sat_score end),2) as patient_sat_score
from `hospital er (1)` h 
join doctor_patients_data d on h.patient_id = d.patient_id
group by 1
order by 2 desc;
    
-- 19.	Find doctors who have treated patients from different races and calculate the diversity of their patient base. (SQL)   

select
	d.`Doctor Name` as Doctor_Name,
    count(distinct h.patient_race) as differnet_race_count
from `hospital er (1)` h 
join doctor_patients_data d on h.patient_id = d.patient_id
group by 1
having count(distinct h.patient_race) >1
order by 2 desc;


-- 20.  Calculate the ratio of total bills generated by male patients to female patients for each department. (SQL)

select
	h.department_referral,
    sum(case when patient_gender = "M" then d.`Total Bill` end) as male_total_bill,
	sum(case when patient_gender = "F" then d.`Total Bill` end) as Female_total_bill,
    round(sum(case when patient_gender = "M" then d.`Total Bill` end) / sum(case when patient_gender = "F" then d.`Total Bill` end),2) as Male_To_Female_Ratio
from `hospital er (1)` h 
join doctor_patients_data d on h.patient_id = d.patient_id
group by 1;

-- 21.  Update the patient satisfaction score for all patients who visited the "General Practice" department and had a waiting time of more than 30 minutes. 
--      Increase their satisfaction score by 2 points, but ensure that the satisfaction score does not exceed 10. (SQL)

SET SQL_SAFE_UPDATES = 0;

UPDATE `hospital er (1)` AS h
SET 
    h.patient_sat_score = CASE 
        WHEN h.patient_sat_score + 2 > 10 THEN 10
        ELSE h.patient_sat_score + 2
    END
WHERE 
    h.department_referral = 'General Practice'
    AND h.patient_waittime > 30; 

SET SQL_SAFE_UPDATES = 1;








